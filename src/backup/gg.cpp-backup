#include <Arduino.h>
//======================================================================
//  Program: gg.cpp - GeoGadget based on UBLOX GPS receiver
//======================================================================
#include <ublox/ubxGPS.h>
#include <Streamers.h>

#include "gg_int.hpp"
#include "gg_debug.hpp"
#include "gg_gps.hpp"

#include <U8x8lib.h>
#include <GPSport.h>
#include <AltSoftSerial.h>
#define GPS_PORT_NAME "AltSoftSerial(RX pin 8, TX pin 9)"

AltSoftSerial gpsPort;

static GPS gps(&gpsPort);
static gps_fix fix;

U8X8_SSD1306_128X64_NONAME_HW_I2C u8x8;

/*****************************************************************************
   Display in diff modes
*****************************************************************************/
void clear_display() {
  u8x8.clear();
}

void displaydata() {
  u8x8.setFont(u8x8_font_artossans8_r);

  u8x8.setCursor(0, 0);
  u8x8.print(F("UTC: "));
  u8x8.print(fix.dateTime);
  // char _float_buf1[9];
  // dtostrf(busvoltage, 7, ina219.getVbusDigitsAfterPoint(), _float_buf1);  /* 8 is mininum width, 2 is precision */
  // u8x8.draw2x2String(2, 0, _float_buf1);
  //
  // // Ampermeter
  // u8x8.setCursor(0, 2);
  // u8x8.print(F("mA:"));
  // if (ovf) {
  //   u8x8.setInverseFont(1);
  // }
  // dtostrf(current_mA, 8, ina219.getCurrentDigitsAfterPoint(), _float_buf1);  /* 8 is mininum width, 2 is precision */
  // u8x8.draw2x2String(0, 3, _float_buf1);
  // u8x8.setInverseFont(0);
  //
  // // Scale info
  // u8x8.setCursor(0, 6);
  // u8x8.print(F("scale:"));
  // char _float_buf2[6];
  // dtostrf(ina219.getCurrentOverflow(), 5, 3, _float_buf2);
  // char _float_buf3[5];
  // dtostrf(ina219.getCurrentLSB(), 4, 2, _float_buf3);
  // u8x8.setCursor(0, 7);
  // u8x8.print(F(" "));
  // u8x8.print(_float_buf2);
  // u8x8.print(F("A  "));
  // u8x8.print(_float_buf3);
  // u8x8.print(F("mA"));
}

//--------------------------
static void configNMEA(uint8_t rate) {
  for (uint8_t i=NMEAGPS::NMEA_FIRST_MSG; i<=NMEAGPS::NMEA_LAST_MSG; i++) {
    ublox::configNMEA( gps, (NMEAGPS::nmea_msg_t) i, rate );
  }
}

//--------------------------
static void disableUBX() {
  gps.disable_msg( ublox::UBX_NAV, ublox::UBX_NAV_STATUS );
  gps.disable_msg( ublox::UBX_NAV, ublox::UBX_NAV_TIMEGPS );
  gps.disable_msg( ublox::UBX_NAV, ublox::UBX_NAV_TIMEUTC );
  gps.disable_msg( ublox::UBX_NAV, ublox::UBX_NAV_VELNED );
  gps.disable_msg( ublox::UBX_NAV, ublox::UBX_NAV_POSLLH );
  gps.disable_msg( ublox::UBX_NAV, ublox::UBX_NAV_DOP );
  gps.disable_msg( ublox::UBX_NAV, ublox::UBX_NAV_SVINFO );
}

// //--------------------------
// void _dumpGPSPort(unsigned int cycles = 1) {
//   unsigned int bytes;
//   DEBUG_PORT.println(F("=====GPS port dump START====="));
//   for (size_t i = 0; i < cycles; i++) {
//     delay(1);
//     bytes = gpsPort.available();
//     if (!bytes) {
//       DEBUG_PORT.print(F("*"));
//     }
//     for (size_t j = 0; j < bytes; j++) {
//       DEBUG_PORT.write(gpsPort.read());
//     }
//   }
//   DEBUG_PORT.println(F("-----GPS port dump STOP-----"));
//   DEBUG_PORT.flush();
// }

//--------------------------
void _dumpPort(Stream& port_in, Stream& port_out, unsigned int cycles) {
  unsigned int bytes;
  port_out.println(F("=====PORT dump START====="));
  for (size_t i = 0; i < cycles; i++) {
    delay(1);
    bytes = port_in.available();
    if (!bytes) {
      port_out.print(F("*"));
    }
    for (size_t j = 0; j < bytes; j++) {
      port_out.write(port_in.read());
    }
  }
  port_out.println(F("-----PORT dump STOP-----"));
  port_out.flush();
}

//--------------------------
void setup() {
  // Start the normal trace output
  DEBUG_PORT.begin(9600);
  while (!DEBUG_PORT)
    ;

  u8x8.begin();

  DEBUG_PORT.print(F("Ublox binary protocol example\n"));
  DEBUG_PORT << F("fix object size = ") << sizeof(gps.fix()) << '\n';
  DEBUG_PORT << F("GPS object size = ") << sizeof(gps) << '\n';
  DEBUG_PORT.println(F("Looking for GPS device on " GPS_PORT_NAME));
  DEBUG_PORT.flush();

  gpsPort.begin(9600);
  configNMEA(0);
  disableUBX();

  int pstate = gps.state;
  bool running = false;
  do {
    running = gps.running();
    gps.available(gpsPort);
    if (gps.state != pstate) {
      DEBUG_PORT.println(F("\n++++++++++++++++++++gps.state changed++++++++++++++++++++"));
      _dumpPort(gpsPort, DEBUG_PORT, 2500UL);
      pstate = gps.state;
    }
  } while (not running);
}

//--------------------------
void loop() {
  if (gps.available(gpsPort)) {
    fix = gps.read();
    trace_all(DEBUG_PORT, gps, fix);
    displaydata();
  }
}
